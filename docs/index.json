{
  "api/CMD_Parser.BuildingException.html": {
    "href": "api/CMD_Parser.BuildingException.html",
    "title": "Class BuildingException | Command Line Parser",
    "summary": "Class BuildingException Namespace CMD_Parser Assembly CMD_Parser.dll Represents errors that occur during the building or configuration of the parser. public class BuildingException : CmdParserException, ISerializable Inheritance object Exception CmdParserException BuildingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BuildingException(string?) public BuildingException(string? message = null) Parameters message string BuildingException(string, Exception) public BuildingException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/CMD_Parser.CmdParserException.html": {
    "href": "api/CMD_Parser.CmdParserException.html",
    "title": "Class CmdParserException | Command Line Parser",
    "summary": "Class CmdParserException Namespace CMD_Parser Assembly CMD_Parser.dll The base exception type for all errors thrown by the CMD Parser library. public class CmdParserException : Exception, ISerializable Inheritance object Exception CmdParserException Implements ISerializable Derived BuildingException ParsingException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CmdParserException() public CmdParserException() CmdParserException(string?) public CmdParserException(string? message = null) Parameters message string CmdParserException(string, Exception) public CmdParserException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/CMD_Parser.ForbiddenCombinationException.html": {
    "href": "api/CMD_Parser.ForbiddenCombinationException.html",
    "title": "Class ForbiddenCombinationException | Command Line Parser",
    "summary": "Class ForbiddenCombinationException Namespace CMD_Parser Assembly CMD_Parser.dll Thrown when a combination of options on the command line does not belong to the same group. public class ForbiddenCombinationException : ParsingException, ISerializable Inheritance object Exception CmdParserException ParsingException ForbiddenCombinationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ForbiddenCombinationException(string?) Thrown when a combination of options on the command line does not belong to the same group. public ForbiddenCombinationException(string? message = null) Parameters message string"
  },
  "api/CMD_Parser.Option.html": {
    "href": "api/CMD_Parser.Option.html",
    "title": "Class Option | Command Line Parser",
    "summary": "Class Option Namespace CMD_Parser Assembly CMD_Parser.dll Houses the Option definitions. public class Option Inheritance object Option Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Option(string) Parametrized constructor which takes the option name. public Option(string name) Parameters name string The name of the option."
  },
  "api/CMD_Parser.OptionBuilder.html": {
    "href": "api/CMD_Parser.OptionBuilder.html",
    "title": "Class OptionBuilder | Command Line Parser",
    "summary": "Class OptionBuilder Namespace CMD_Parser Assembly CMD_Parser.dll Builder pattern class; used to provide a fluid option defining experience to the user, while not exposing them to the Option objects. public class OptionBuilder Inheritance object OptionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsRequired() Sets the option as required. If it is not set when the program runs, an UnsetOptionException will be thrown. public OptionBuilder AsRequired() Returns OptionBuilder SetOption() Finalizing build method, must be called at the end of setting the option for the option to be valid. public void SetOption() WithAlias(params string[]) Allows the user to set an alias for the option. BuildingException is thrown if the name is already taken. It can take numerous aliases. public OptionBuilder WithAlias(params string[] alias) Parameters alias string[] The alias for the option. Returns OptionBuilder WithGroup(params int[]) Allows the user to set a group for the option. The group is defined by its number (integer). Options within different groups can not appear together on the command line. If an option doesn't have a group set, it can be used with everything. Options can have multiple groups. This will be displayed in the help and a ForbiddenCombinationException will be thrown if different groups appear together on the command line. public OptionBuilder WithGroup(params int[] groupNum) Parameters groupNum int[] The group numbers for the option. Returns OptionBuilder WithHelp(string) Allows the user to define the help text for the option. public OptionBuilder WithHelp(string help) Parameters help string The help text for the option. Returns OptionBuilder WithPair(string) Allows the user to set a paired name for the option. If it is a long option, the pair must be a short option, and vice versa. BuildingException will be thrown if the name is already taken or if the name does not conform to the type of option. public OptionBuilder WithPair(string name) Parameters name string The paired name for the option. Returns OptionBuilder WithParameter<T>(Parameter<T>) Allows the user to set only one parameter for the option in the form of a built Parameter object. public OptionBuilder WithParameter<T>(Parameter<T> parameter) Parameters parameter Parameter<T> The parameter for the option. Returns OptionBuilder Type Parameters T"
  },
  "api/CMD_Parser.Parameter-1.html": {
    "href": "api/CMD_Parser.Parameter-1.html",
    "title": "Class Parameter<T> | Command Line Parser",
    "summary": "Class Parameter<T> Namespace CMD_Parser Assembly CMD_Parser.dll Generic parameter class which holds the parameter data. public class Parameter<T> : ParameterWrapper Type Parameters T Inheritance object ParameterWrapper Parameter<T> Inherited Members ParameterWrapper.Name ParameterWrapper.IsRequired ParameterWrapper.HasDefault ParameterWrapper.Help object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetType() public override dynamic GetType() Returns dynamic GetValue() public override dynamic GetValue() Returns dynamic Value() public T Value() Returns T"
  },
  "api/CMD_Parser.ParameterBuilder-1.html": {
    "href": "api/CMD_Parser.ParameterBuilder-1.html",
    "title": "Class ParameterBuilder<T> | Command Line Parser",
    "summary": "Class ParameterBuilder<T> Namespace CMD_Parser Assembly CMD_Parser.dll Builder pattern class used to provide a fluid parameter defining experience to the user, while not exposing them to the Parameter objects. public class ParameterBuilder<T> Type Parameters T Inheritance object ParameterBuilder<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParameterBuilder(string) Constructor for cases when the ParameterBuilder needs to be accessed directly and when it is being set up as an option parameter. public ParameterBuilder(string name) Parameters name string The name of the parameter. Methods AsRequired() Specifies whether the parameter is required. If it is not set on the command line (either as a parameter or an option parameter), an UnsetParameterException will be thrown. public ParameterBuilder<T> AsRequired() Returns ParameterBuilder<T> GetParameter() Allows the user to get the fully built Parameter object to pass to the OptionBuilder class. Only available if the instance of the builder class was created directly, otherwise BuildingException will be thrown. public Parameter<T> GetParameter() Returns Parameter<T> SetParameter() Allows the user to set the parameter (plain option). Only available if the builder class was accessed through the AddParameter method in ParserControl, otherwise BuildingException will be thrown. These parameters will capture plain arguments in the order they were set. public void SetParameter() WithDefaultValue(T) Allows the user to set a default value for the parameter. public ParameterBuilder<T> WithDefaultValue(T value) Parameters value T The default value. Returns ParameterBuilder<T> WithHelp(string) Allows the user to define the help text for the parameter. public ParameterBuilder<T> WithHelp(string help) Parameters help string The help text for the parameter. Returns ParameterBuilder<T> WithLambdaValidation(Func<T, bool>) Allows the user to enter a lambda function for parameter verification. public ParameterBuilder<T> WithLambdaValidation(Func<T, bool> func) Parameters func Func<T, bool> The lambda function for value verification. Returns ParameterBuilder<T> WithParser(Func<string, T>) Allows the user to set a custom parser for the parameter. public ParameterBuilder<T> WithParser(Func<string, T> parser) Parameters parser Func<string, T> The custom parser. Returns ParameterBuilder<T>"
  },
  "api/CMD_Parser.ParameterWrapper.html": {
    "href": "api/CMD_Parser.ParameterWrapper.html",
    "title": "Class ParameterWrapper | Command Line Parser",
    "summary": "Class ParameterWrapper Namespace CMD_Parser Assembly CMD_Parser.dll public abstract class ParameterWrapper Inheritance object ParameterWrapper Derived Parameter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasDefault public bool HasDefault { get; protected set; } Property Value bool Help public string Help { get; protected set; } Property Value string IsRequired public bool IsRequired { get; protected set; } Property Value bool Name public string Name { get; protected set; } Property Value string Methods GetType() public abstract dynamic GetType() Returns dynamic GetValue() public abstract dynamic GetValue() Returns dynamic"
  },
  "api/CMD_Parser.ParserControl.html": {
    "href": "api/CMD_Parser.ParserControl.html",
    "title": "Class ParserControl | Command Line Parser",
    "summary": "Class ParserControl Namespace CMD_Parser Assembly CMD_Parser.dll The load bearing class, with which the user is able to communicate when defining options and their parameters, as well as when parsing the values obtained from these options during runtime. public class ParserControl Inheritance object ParserControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOption(string) Provides the user with an instance of OptionBuilder, which they can set up, as an option instance within the ParserControl object. public OptionBuilder AddOption(string name) Parameters name string The short or long name of the option. Returns OptionBuilder An instance of the OptionBuilder class. AddParameter<T>(string) Provides the user with an instance of the generic ParameterBuilder, which they can set up, as a parameter (plain option) instance within the ParserControl object. Can be parametrized as if it were an option parameter, the default is a string parameter. public ParameterBuilder<T> AddParameter<T>(string name) Parameters name string The name of the parameter. Returns ParameterBuilder<T> An instance of the ParameterBuilder class. Type Parameters T GetHelp() Allows the user to get formatted help for all the options, parameters and option parameters, as well as information on groups and usage. public string GetHelp() Returns string A string which holds the entirety of the help. GetOptionNames() Allows the user to access the names of all options and parameters that have been set in the command line, it will always return the name of the long option if it has both a long and short variants, and only return the short name if that is the only variant of that command. public List<string> GetOptionNames() Returns List<string> A list of strings representing the names of the options. GetUncaught() Allows the user to retrieve all command line arguments which hadn't been caught by any specified option, parameter or option parameters, all as strings, identical to how they were on the command line. public List<string> GetUncaught() Returns List<string> A list of strings which holds all uncaught arguments. GetValue(string) Allows the user to retrieve the value for a specified option or parameter. The user is assumed to know what type of parameters they expect from each of the options. If the parameter isn't set and there is no default value set, true will be returned. public dynamic GetValue(string name) Parameters name string The name of the option for which the parameter is requested. Returns dynamic Set value for the option or parameter. IsSet(string) Allows the user to check whether a specified option was set on the command line. public bool IsSet(string optionName) Parameters optionName string The name of the option, the status of which we are checking. Returns bool A boolean value, based on whether the option was set. ParseArgs(string[]) Parses all the arguments on the command line, and prepares the ParserControl instance for queries about the options, parameters and option parameters through its methods. If any required parameters or options are missing UnsetParameterException or UnsetOptionException will be thrown. public void ParseArgs(string[] args) Parameters args string[] The array of command-line arguments to be parsed."
  },
  "api/CMD_Parser.ParsingException.html": {
    "href": "api/CMD_Parser.ParsingException.html",
    "title": "Class ParsingException | Command Line Parser",
    "summary": "Class ParsingException Namespace CMD_Parser Assembly CMD_Parser.dll Represents errors that occur during parsing of the command line input. public class ParsingException : CmdParserException, ISerializable Inheritance object Exception CmdParserException ParsingException Implements ISerializable Derived ForbiddenCombinationException UnsetOptionException UnsetParameterException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ParsingException(string?) public ParsingException(string? message = null) Parameters message string ParsingException(string, Exception) public ParsingException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/CMD_Parser.UnsetOptionException.html": {
    "href": "api/CMD_Parser.UnsetOptionException.html",
    "title": "Class UnsetOptionException | Command Line Parser",
    "summary": "Class UnsetOptionException Namespace CMD_Parser Assembly CMD_Parser.dll Thrown when a required options is not set on the command line. public class UnsetOptionException : ParsingException, ISerializable Inheritance object Exception CmdParserException ParsingException UnsetOptionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnsetOptionException(string?) Thrown when a required options is not set on the command line. public UnsetOptionException(string? message = null) Parameters message string"
  },
  "api/CMD_Parser.UnsetParameterException.html": {
    "href": "api/CMD_Parser.UnsetParameterException.html",
    "title": "Class UnsetParameterException | Command Line Parser",
    "summary": "Class UnsetParameterException Namespace CMD_Parser Assembly CMD_Parser.dll Thrown when a parameter for non-flag option is not set on the command line. public class UnsetParameterException : ParsingException, ISerializable Inheritance object Exception CmdParserException ParsingException UnsetParameterException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnsetParameterException(string?) Thrown when a parameter for non-flag option is not set on the command line. public UnsetParameterException(string? message = null) Parameters message string"
  },
  "api/CMD_Parser.html": {
    "href": "api/CMD_Parser.html",
    "title": "Namespace CMD_Parser | Command Line Parser",
    "summary": "Namespace CMD_Parser Classes BuildingException Represents errors that occur during the building or configuration of the parser. CmdParserException The base exception type for all errors thrown by the CMD Parser library. ForbiddenCombinationException Thrown when a combination of options on the command line does not belong to the same group. OptionBuilder Builder pattern class; used to provide a fluid option defining experience to the user, while not exposing them to the Option objects. ParameterBuilder<T> Builder pattern class used to provide a fluid parameter defining experience to the user, while not exposing them to the Parameter objects. ParameterWrapper Parameter<T> Generic parameter class which holds the parameter data. ParserControl The load bearing class, with which the user is able to communicate when defining options and their parameters, as well as when parsing the values obtained from these options during runtime. ParsingException Represents errors that occur during parsing of the command line input. UnsetOptionException Thrown when a required options is not set on the command line. UnsetParameterException Thrown when a parameter for non-flag option is not set on the command line."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Command Line Parser",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Command Line Parser",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Command Line Parser",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}